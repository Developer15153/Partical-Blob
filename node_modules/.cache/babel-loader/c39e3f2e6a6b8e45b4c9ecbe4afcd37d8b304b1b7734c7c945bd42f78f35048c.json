{"ast":null,"code":"import { useThree, useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\nimport { presetsObj } from '../helpers/environment-assets.js';\nimport { sRGBEncoding, LinearEncoding } from '../helpers/deprecated.js';\nimport { useLayoutEffect } from 'react';\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isArray = arr => Array.isArray(arr);\nfunction useEnvironment() {\n  let {\n    files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n    path = '',\n    preset = undefined,\n    encoding = undefined,\n    extensions\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _firstEntry$split$pop;\n  let loader = null;\n  let multiFile = false;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  const isCubemap = isArray(files) && files.length === 6;\n  const isGainmap = isArray(files) && files.length === 3 && files.some(file => file.endsWith('json'));\n  const firstEntry = isArray(files) ? files[0] : files;\n\n  // Everything else\n  multiFile = isArray(files);\n  const extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\n  loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const gl = useThree(state => state.gl);\n  useLayoutEffect(() => {\n    // Only required for gainmap\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\n    function clearGainmapTexture() {\n      // @ts-expect-error\n      useLoader.clear(loader, multiFile ? [files] : files);\n    }\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\n      once: true\n    });\n  }, [files, gl.domElement]);\n  const loaderResult = useLoader(\n  // @ts-expect-error\n  loader, multiFile ? [files] : files, loader => {\n    // Gainmap requires a renderer\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\n      loader.setRenderer(gl);\n    }\n    loader.setPath == null || loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  let texture = multiFile ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\n    var _renderTarget;\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\n  }\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nexport { useEnvironment };","map":{"version":3,"names":["useThree","useLoader","CubeReflectionMapping","EquirectangularReflectionMapping","CubeTextureLoader","RGBELoader","EXRLoader","HDRJPGLoader","GainMapLoader","presetsObj","sRGBEncoding","LinearEncoding","useLayoutEffect","CUBEMAP_ROOT","isArray","arr","Array","useEnvironment","files","path","preset","undefined","encoding","extensions","arguments","length","_firstEntry$split$pop","loader","multiFile","Error","Object","keys","join","isCubemap","isGainmap","some","file","endsWith","firstEntry","extension","startsWith","split","pop","shift","toLowerCase","gl","state","clearGainmapTexture","clear","domElement","addEventListener","once","loaderResult","setRenderer","setPath","texture","_renderTarget","renderTarget","mapping","colorSpace"],"sources":["C:/Users/admin/Desktop/All Custome Codes/BolbAnimation/Partical-Blob/node_modules/@react-three/drei/core/useEnvironment.js"],"sourcesContent":["import { useThree, useLoader } from '@react-three/fiber';\r\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\r\nimport { RGBELoader, EXRLoader } from 'three-stdlib';\r\nimport { HDRJPGLoader, GainMapLoader } from '@monogrid/gainmap-js';\r\nimport { presetsObj } from '../helpers/environment-assets.js';\r\nimport { sRGBEncoding, LinearEncoding } from '../helpers/deprecated.js';\r\nimport { useLayoutEffect } from 'react';\r\n\r\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\r\nconst isArray = arr => Array.isArray(arr);\r\nfunction useEnvironment({\r\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\r\n  path = '',\r\n  preset = undefined,\r\n  encoding = undefined,\r\n  extensions\r\n} = {}) {\r\n  var _firstEntry$split$pop;\r\n  let loader = null;\r\n  let multiFile = false;\r\n  if (preset) {\r\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\r\n    files = presetsObj[preset];\r\n    path = CUBEMAP_ROOT;\r\n  }\r\n  const isCubemap = isArray(files) && files.length === 6;\r\n  const isGainmap = isArray(files) && files.length === 3 && files.some(file => file.endsWith('json'));\r\n  const firstEntry = isArray(files) ? files[0] : files;\r\n\r\n  // Everything else\r\n  multiFile = isArray(files);\r\n  const extension = isCubemap ? 'cube' : isGainmap ? 'webp' : firstEntry.startsWith('data:application/exr') ? 'exr' : firstEntry.startsWith('data:application/hdr') ? 'hdr' : firstEntry.startsWith('data:image/jpeg') ? 'jpg' : (_firstEntry$split$pop = firstEntry.split('.').pop()) == null || (_firstEntry$split$pop = _firstEntry$split$pop.split('?')) == null || (_firstEntry$split$pop = _firstEntry$split$pop.shift()) == null ? void 0 : _firstEntry$split$pop.toLowerCase();\r\n  loader = extension === 'cube' ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : extension === 'jpg' || extension === 'jpeg' ? HDRJPGLoader : extension === 'webp' ? GainMapLoader : null;\r\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\r\n  const gl = useThree(state => state.gl);\r\n  useLayoutEffect(() => {\r\n    // Only required for gainmap\r\n    if (extension !== 'webp' && extension !== 'jpg' && extension !== 'jpeg') return;\r\n    function clearGainmapTexture() {\r\n      // @ts-expect-error\r\n      useLoader.clear(loader, multiFile ? [files] : files);\r\n    }\r\n    gl.domElement.addEventListener('webglcontextlost', clearGainmapTexture, {\r\n      once: true\r\n    });\r\n  }, [files, gl.domElement]);\r\n  const loaderResult = useLoader(\r\n  // @ts-expect-error\r\n  loader, multiFile ? [files] : files, loader => {\r\n    // Gainmap requires a renderer\r\n    if (extension === 'webp' || extension === 'jpg' || extension === 'jpeg') {\r\n      loader.setRenderer(gl);\r\n    }\r\n    loader.setPath == null || loader.setPath(path);\r\n    if (extensions) extensions(loader);\r\n  });\r\n  let texture = multiFile ?\r\n  // @ts-ignore\r\n  loaderResult[0] : loaderResult;\r\n  if (extension === 'jpg' || extension === 'jpeg' || extension === 'webp') {\r\n    var _renderTarget;\r\n    texture = (_renderTarget = texture.renderTarget) == null ? void 0 : _renderTarget.texture;\r\n  }\r\n  texture.mapping = isCubemap ? CubeReflectionMapping : EquirectangularReflectionMapping;\r\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubemap) ? sRGBEncoding : LinearEncoding;\r\n  return texture;\r\n}\r\n\r\nexport { useEnvironment };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}