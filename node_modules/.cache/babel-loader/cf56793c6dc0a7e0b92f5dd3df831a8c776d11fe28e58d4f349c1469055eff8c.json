{"ast":null,"code":"import Panel from \"./panel.js\";\nconst _Stats = class _Stats2 {\n  constructor() {\n    let {\n      logsPerSecond = 20,\n      samplesLog = 100,\n      samplesGraph = 10,\n      precision = 2,\n      minimal = false,\n      horizontal = true,\n      mode = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.totalCpuDuration = 0;\n    this.totalGpuDuration = 0;\n    this.totalGpuDurationCompute = 0;\n    this.totalFps = 0;\n    this.activeQuery = null;\n    this.gpuQueries = [];\n    this.renderCount = 0;\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.dom = document.createElement(\"div\");\n    this.dom.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.dom.style.cssText += \"cursor:pointer\";\n    }\n    this.gl = null;\n    this.query = null;\n    this.isRunningCPUProfiling = false;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.renderCount = 0;\n    this.threeRendererPatched = false;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpuCompute = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats2.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats2.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.gpuPanelCompute = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.dom.addEventListener(\"click\", event => {\n        event.preventDefault();\n        this.showPanel(++this.mode % this.dom.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", () => {\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n        if (this.gpuPanelCompute) {\n          this.resizePanel(this.gpuPanelCompute, 3);\n        }\n      });\n    }\n  }\n  patchThreeRenderer(renderer) {\n    const originalRenderMethod = renderer.render;\n    const statsInstance = this;\n    renderer.render = function (scene, camera) {\n      statsInstance.begin();\n      originalRenderMethod.call(this, scene, camera);\n      statsInstance.end();\n    };\n    this.threeRendererPatched = true;\n  }\n  resizePanel(panel, offset) {\n    panel.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel.canvas.style.display = \"none\";\n    } else {\n      panel.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel.canvas.style.top = \"0px\";\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n      } else {\n        panel.canvas.style.left = \"0px\";\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel, offset) {\n    if (panel.canvas) {\n      this.dom.appendChild(panel.canvas);\n      this.resizePanel(panel, offset);\n    }\n    return panel;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.dom.children.length; i++) {\n      const child = this.dom.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  async init(canvasOrGL) {\n    if (!canvasOrGL) {\n      console.error('Stats: The \"canvas\" parameter is undefined.');\n      return;\n    }\n    if (canvasOrGL.isWebGLRenderer && !this.threeRendererPatched) {\n      const canvas = canvasOrGL;\n      this.patchThreeRenderer(canvas);\n      this.gl = canvas.getContext();\n    } else if (!this.gl && canvasOrGL instanceof WebGL2RenderingContext) {\n      this.gl = canvasOrGL;\n    }\n    if (canvasOrGL.isWebGPURenderer) {\n      canvasOrGL.backend.trackTimestamp = true;\n      if (await canvasOrGL.hasFeatureAsync(\"timestamp-query\")) {\n        this.gpuPanel = this.addPanel(new _Stats2.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n        this.gpuPanelCompute = this.addPanel(new _Stats2.Panel(\"CPT\", \"#e1e1e1\", \"#212121\"), 3);\n        this.info = canvasOrGL.info;\n      }\n      return;\n    } else if (!this.gl && canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\n      this.gl = canvasOrGL.getContext(\"webgl2\");\n      if (!this.gl) {\n        console.error(\"Stats: Unable to obtain WebGL2 context.\");\n        return;\n      }\n    } else if (!this.gl) {\n      console.error(\"Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.\");\n      return;\n    }\n    this.ext = this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new _Stats2.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    }\n  }\n  begin() {\n    if (!this.isRunningCPUProfiling) {\n      this.beginProfiling(\"cpu-started\");\n    }\n    if (!this.gl || !this.ext) return;\n    if (this.gl && this.ext) {\n      if (this.activeQuery) {\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      }\n      this.activeQuery = this.gl.createQuery();\n      if (this.activeQuery !== null) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.activeQuery);\n      }\n    }\n  }\n  end() {\n    this.renderCount++;\n    if (this.gl && this.ext && this.activeQuery) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n      this.gpuQueries.push({\n        query: this.activeQuery\n      });\n      this.activeQuery = null;\n    }\n  }\n  processGpuQueries() {\n    if (!this.gl || !this.ext) return;\n    this.totalGpuDuration = 0;\n    this.gpuQueries.forEach((queryInfo, index) => {\n      if (this.gl) {\n        const available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);\n        const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n        if (available && !disjoint) {\n          const elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);\n          const duration = elapsed * 1e-6;\n          this.totalGpuDuration += duration;\n          this.gl.deleteQuery(queryInfo.query);\n          this.gpuQueries.splice(index, 1);\n        }\n      }\n    });\n  }\n  update() {\n    if (this.info === void 0) {\n      this.processGpuQueries();\n    } else {\n      this.totalGpuDuration = this.info.render.timestamp;\n      this.totalGpuDurationCompute = this.info.compute.timestamp;\n      this.addToAverage(this.totalGpuDurationCompute, this.averageGpuCompute);\n    }\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\");\n    this.addToAverage(this.totalCpuDuration, this.averageCpu);\n    this.addToAverage(this.totalGpuDuration, this.averageGpu);\n    this.renderCount = 0;\n    if (this.totalCpuDuration === 0) {\n      this.beginProfiling(\"cpu-started\");\n    }\n    this.totalCpuDuration = 0;\n    this.totalFps = 0;\n    this.beginTime = this.endInternal();\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n      if (this.gpuPanelCompute) {\n        this.updatePanel(this.gpuPanelCompute, this.averageGpuCompute);\n      }\n      this.prevCpuTime = time;\n    }\n    if (time >= this.prevTime + 1e3) {\n      const fps = this.frames * 1e3 / (time - this.prevTime);\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n      this.isRunningCPUProfiling = true;\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName) {\n    if (window.performance && endMarker && this.isRunningCPUProfiling) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.totalCpuDuration += cpuMeasure.duration;\n      this.isRunningCPUProfiling = false;\n    }\n  }\n  updatePanel(panel, averageArray) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n    }\n  }\n  get domElement() {\n    return this.dom;\n  }\n  get container() {\n    console.warn(\"Stats: Deprecated! this.container as been replaced to this.dom \");\n    return this.dom;\n  }\n};\n_Stats.Panel = Panel;\nlet Stats = _Stats;\nexport { Stats as default };","map":{"version":3,"names":["_Stats","_Stats2","constructor","logsPerSecond","samplesLog","samplesGraph","precision","minimal","horizontal","mode","arguments","length","undefined","totalCpuDuration","totalGpuDuration","totalGpuDurationCompute","totalFps","activeQuery","gpuQueries","renderCount","dom","document","createElement","style","cssText","gl","query","isRunningCPUProfiling","beginTime","performance","Date","now","prevTime","prevCpuTime","frames","threeRendererPatched","averageCpu","logs","graph","averageGpu","averageGpuCompute","queryCreated","fpsPanel","addPanel","Panel","msPanel","gpuPanel","gpuPanelCompute","addEventListener","event","preventDefault","showPanel","children","window","resizePanel","patchThreeRenderer","renderer","originalRenderMethod","render","statsInstance","scene","camera","begin","call","end","panel","offset","canvas","position","display","top","left","WIDTH","PR","HEIGHT","appendChild","id","i","child","init","canvasOrGL","console","error","isWebGLRenderer","getContext","WebGL2RenderingContext","isWebGPURenderer","backend","trackTimestamp","hasFeatureAsync","info","HTMLCanvasElement","OffscreenCanvas","ext","getExtension","beginProfiling","endQuery","TIME_ELAPSED_EXT","createQuery","beginQuery","push","processGpuQueries","forEach","queryInfo","index","available","getQueryParameter","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","elapsed","QUERY_RESULT","duration","deleteQuery","splice","update","timestamp","compute","addToAverage","endProfiling","endInternal","time","updatePanel","fps","value","averageArray","shift","marker","mark","startMarker","endMarker","measureName","cpuMeasure","measure","sumLog","max","sumGraph","maxGraph","Math","min","domElement","container","warn","Stats"],"sources":["C:\\Users\\admin\\Desktop\\All Custome Codes\\BolbAnimation\\Partical-Blob\\node_modules\\stats-gl\\lib\\main.ts"],"sourcesContent":["import Panel from \"./panel\";\r\nimport * as THREE from 'three';\r\nexport interface AverageArray {\r\n  logs: number[];\r\n  graph: number[];\r\n}\r\n\r\n\r\nclass Stats {\r\n  totalCpuDuration: number = 0;\r\n  totalGpuDuration: number = 0;\r\n  totalGpuDurationCompute: number = 0;\r\n  totalFps: number = 0;\r\n  mode: number;\r\n  info: any;\r\n  dom: HTMLDivElement;\r\n  minimal: boolean;\r\n  horizontal: boolean;\r\n  beginTime: number;\r\n  prevTime: number;\r\n  prevCpuTime: number;\r\n  frames: number;\r\n  averageCpu: AverageArray;\r\n  averageGpu: AverageArray;\r\n  averageGpuCompute: AverageArray;\r\n  queryCreated: boolean;\r\n  isRunningCPUProfiling: boolean;\r\n  fpsPanel: Panel;\r\n  static Panel: typeof Panel = Panel;\r\n  msPanel: Panel;\r\n  gpuPanel: Panel | null;\r\n  gpuPanelCompute: Panel | null;\r\n  samplesLog: number;\r\n  samplesGraph: number;\r\n  logsPerSecond: number;\r\n  activeQuery: WebGLQuery | null = null;\r\n\r\n  precision: number;\r\n  gl: WebGL2RenderingContext | null;\r\n  ext: any;\r\n  query: WebGLQuery | null;\r\n  disjoint: any;\r\n  ns: any;\r\n  threeRendererPatched: boolean;\r\n  gpuQueries: { query: WebGLQuery }[] = [];\r\n  renderCount: number = 0;\r\n\r\n  constructor({ logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {}) {\r\n\r\n    this.mode = mode;\r\n    this.horizontal = horizontal;\r\n    this.dom = document.createElement('div');\r\n    this.dom.style.cssText = 'position:fixed;top:0;left:0;opacity:0.9;z-index:10000;';\r\n\r\n    if (minimal) {\r\n\r\n      this.dom.style.cssText += 'cursor:pointer';\r\n\r\n    }\r\n\r\n    this.gl = null;\r\n    this.query = null;\r\n\r\n    this.isRunningCPUProfiling = false;\r\n    this.minimal = minimal;\r\n\r\n    this.beginTime = (performance || Date).now();\r\n    this.prevTime = this.beginTime;\r\n    this.prevCpuTime = this.beginTime;\r\n    this.frames = 0;\r\n    this.renderCount = 0;\r\n    this.threeRendererPatched = false;\r\n    this.averageCpu = {\r\n      logs: [],\r\n      graph: []\r\n    };\r\n    this.averageGpu = {\r\n      logs: [],\r\n      graph: []\r\n    };\r\n    this.averageGpuCompute = {\r\n      logs: [],\r\n      graph: []\r\n    };\r\n\r\n    this.queryCreated = false;\r\n\r\n    this.fpsPanel = this.addPanel(new Stats.Panel('FPS', '#0ff', '#002'), 0);\r\n    this.msPanel = this.addPanel(new Stats.Panel('CPU', '#0f0', '#020'), 1);\r\n    this.gpuPanel = null;\r\n    this.gpuPanelCompute = null;\r\n\r\n    this.samplesLog = samplesLog;\r\n    this.samplesGraph = samplesGraph;\r\n    this.precision = precision;\r\n    this.logsPerSecond = logsPerSecond;\r\n\r\n    if (this.minimal) {\r\n\r\n      this.dom.addEventListener('click', (event) => {\r\n\r\n        event.preventDefault();\r\n        this.showPanel(++this.mode % this.dom.children.length);\r\n\r\n      }, false);\r\n\r\n      this.mode = mode;\r\n      this.showPanel(this.mode);\r\n\r\n    } else {\r\n\r\n      window.addEventListener('resize', () => {\r\n\r\n        this.resizePanel(this.fpsPanel, 0);\r\n        this.resizePanel(this.msPanel, 1);\r\n\r\n        if (this.gpuPanel) {\r\n          this.resizePanel(this.gpuPanel, 2);\r\n        }\r\n        if (this.gpuPanelCompute) {\r\n          this.resizePanel(this.gpuPanelCompute, 3);\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  patchThreeRenderer(renderer: any) {\r\n\r\n    // Store the original render method\r\n    const originalRenderMethod = renderer.render;\r\n\r\n    // Reference to the stats instance\r\n    const statsInstance = this;\r\n\r\n    // Override the render method on the prototype\r\n    renderer.render = function (scene: THREE.Scene, camera: THREE.Camera) {\r\n\r\n\r\n      statsInstance.begin(); // Start tracking for this render call\r\n\r\n      // Call the original render method\r\n      originalRenderMethod.call(this, scene, camera);\r\n\r\n      statsInstance.end(); // End tracking for this render call\r\n    };\r\n\r\n\r\n    this.threeRendererPatched = true;\r\n\r\n  }\r\n\r\n  resizePanel(panel: Panel, offset: number) {\r\n\r\n    panel.canvas.style.position = 'absolute';\r\n\r\n    if (this.minimal) {\r\n\r\n      panel.canvas.style.display = 'none';\r\n\r\n    } else {\r\n\r\n      panel.canvas.style.display = 'block';\r\n      if (this.horizontal) {\r\n        panel.canvas.style.top = '0px';\r\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + 'px';\r\n      } else {\r\n        panel.canvas.style.left = '0px';\r\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + 'px';\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  addPanel(panel: Panel, offset: number) {\r\n\r\n    if (panel.canvas) {\r\n\r\n      this.dom.appendChild(panel.canvas);\r\n\r\n      this.resizePanel(panel, offset);\r\n\r\n    }\r\n\r\n    return panel;\r\n\r\n  }\r\n\r\n  showPanel(id: number) {\r\n\r\n    for (let i = 0; i < this.dom.children.length; i++) {\r\n      const child = this.dom.children[i] as HTMLElement;\r\n\r\n      child.style.display = i === id ? 'block' : 'none';\r\n\r\n    }\r\n\r\n    this.mode = id;\r\n\r\n  }\r\n\r\n  async init(canvasOrGL: any) {\r\n    if (!canvasOrGL) {\r\n      console.error('Stats: The \"canvas\" parameter is undefined.');\r\n      return;\r\n    }\r\n\r\n\r\n    // if ((canvasOrGL as any).isWebGPURenderer && !this.threeRendererPatched) {\r\n    // TODO Color GPU Analytic in another color than yellow to know webgpu or webgl context (blue)\r\n    //   const canvas: any = canvasOrGL\r\n    //   this.patchThreeRenderer(canvas as any);\r\n    //   this.gl = canvas.getContext();\r\n    // } else \r\n    if ((canvasOrGL as any).isWebGLRenderer && !this.threeRendererPatched) {\r\n      const canvas: any = canvasOrGL\r\n      this.patchThreeRenderer(canvas as any);\r\n      this.gl = canvas.getContext();\r\n    } else if (!this.gl && canvasOrGL instanceof WebGL2RenderingContext) {\r\n      this.gl = canvasOrGL;\r\n    }\r\n\r\n    if (canvasOrGL.isWebGPURenderer) {\r\n\r\n      canvasOrGL.backend.trackTimestamp = true\r\n\r\n      if (await canvasOrGL.hasFeatureAsync('timestamp-query')) {\r\n        this.gpuPanel = this.addPanel(new Stats.Panel('GPU', '#ff0', '#220'), 2);\r\n        this.gpuPanelCompute = this.addPanel(new Stats.Panel('CPT', '#e1e1e1', '#212121'), 3);\r\n        this.info = canvasOrGL.info\r\n      }\r\n      return;\r\n    }\r\n    // Check if canvasOrGL is already a WebGL2RenderingContext\r\n\r\n\r\n    // Handle HTMLCanvasElement and OffscreenCanvas\r\n    else if (!this.gl && canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\r\n      this.gl = canvasOrGL.getContext('webgl2') as WebGL2RenderingContext;\r\n      if (!this.gl) {\r\n        console.error('Stats: Unable to obtain WebGL2 context.');\r\n        return;\r\n      }\r\n    } else if (!this.gl) {\r\n      console.error('Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.');\r\n      return;\r\n    }\r\n\r\n    // Get the extension\r\n    this.ext = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    if (this.ext) {\r\n      this.gpuPanel = this.addPanel(new Stats.Panel('GPU', '#ff0', '#220'), 2);\r\n    }\r\n  }\r\n\r\n\r\n  begin() {\r\n\r\n    if (!this.isRunningCPUProfiling) {\r\n      this.beginProfiling('cpu-started');\r\n    }\r\n\r\n    if (!this.gl || !this.ext) return;\r\n\r\n    if (this.gl && this.ext) {\r\n      if (this.activeQuery) {\r\n        // End the previous query if it's still active\r\n        this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\r\n      }\r\n\r\n      this.activeQuery = this.gl.createQuery();\r\n      if (this.activeQuery !== null) {\r\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.activeQuery);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  end() {\r\n\r\n    // Increase render count\r\n    this.renderCount++;\r\n\r\n    if (this.gl && this.ext && this.activeQuery) {\r\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\r\n      // Add the active query to the gpuQueries array and reset it\r\n      this.gpuQueries.push({ query: this.activeQuery });\r\n      this.activeQuery = null;\r\n    }\r\n\r\n  }\r\n\r\n  processGpuQueries() {\r\n\r\n\r\n    if (!this.gl || !this.ext) return;\r\n\r\n    this.totalGpuDuration = 0;\r\n\r\n    this.gpuQueries.forEach((queryInfo, index) => {\r\n      if (this.gl) {\r\n        const available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);\r\n        const disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\r\n\r\n        if (available && !disjoint) {\r\n          const elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);\r\n          const duration = elapsed * 1e-6;  // Convert nanoseconds to milliseconds\r\n          this.totalGpuDuration += duration;\r\n          this.gl.deleteQuery(queryInfo.query);\r\n          this.gpuQueries.splice(index, 1);  // Remove the processed query\r\n        }\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  update() {\r\n\r\n    if (this.info === undefined) {\r\n      this.processGpuQueries();\r\n    } else {\r\n\r\n      this.totalGpuDuration = this.info.render.timestamp\r\n      this.totalGpuDurationCompute = this.info.compute.timestamp\r\n      this.addToAverage(this.totalGpuDurationCompute, this.averageGpuCompute);\r\n\r\n    }\r\n\r\n    this.endProfiling('cpu-started', 'cpu-finished', 'cpu-duration');\r\n\r\n    // Calculate the total duration of CPU and GPU work for this frame\r\n    this.addToAverage(this.totalCpuDuration, this.averageCpu);\r\n    this.addToAverage(this.totalGpuDuration, this.averageGpu);\r\n\r\n    this.renderCount = 0;\r\n\r\n    // If this.totalCpuDuration is 0, it means that the CPU query was not created and stats.begin() never called/overrided\r\n    if (this.totalCpuDuration === 0) {\r\n      this.beginProfiling('cpu-started');\r\n    }\r\n\r\n    this.totalCpuDuration = 0;\r\n\r\n    this.totalFps = 0;\r\n\r\n    this.beginTime = this.endInternal()\r\n\r\n  }\r\n\r\n  endInternal() {\r\n\r\n    this.frames++;\r\n    const time = (performance || Date).now();\r\n\r\n    if (time >= this.prevCpuTime + 1000 / this.logsPerSecond) {\r\n      this.updatePanel(this.msPanel, this.averageCpu);\r\n      this.updatePanel(this.gpuPanel, this.averageGpu);\r\n\r\n      if (this.gpuPanelCompute) {\r\n        this.updatePanel(this.gpuPanelCompute, this.averageGpuCompute);\r\n      }\r\n\r\n      this.prevCpuTime = time;\r\n    }\r\n\r\n    if (time >= this.prevTime + 1000) {\r\n\r\n      const fps = (this.frames * 1000) / (time - this.prevTime);\r\n\r\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\r\n\r\n      this.prevTime = time;\r\n      this.frames = 0;\r\n\r\n    }\r\n\r\n    return time;\r\n\r\n  }\r\n\r\n  addToAverage(value: number, averageArray: { logs: any; graph: any; }) {\r\n\r\n    averageArray.logs.push(value);\r\n    if (averageArray.logs.length > this.samplesLog) {\r\n\r\n      averageArray.logs.shift();\r\n\r\n    }\r\n\r\n    averageArray.graph.push(value);\r\n    if (averageArray.graph.length > this.samplesGraph) {\r\n\r\n      averageArray.graph.shift();\r\n\r\n    }\r\n\r\n  }\r\n\r\n  beginProfiling(marker: string) {\r\n\r\n    if (window.performance) {\r\n\r\n      window.performance.mark(marker);\r\n      this.isRunningCPUProfiling = true\r\n\r\n    }\r\n\r\n  }\r\n\r\n  endProfiling(startMarker: string | PerformanceMeasureOptions | undefined, endMarker: string | undefined, measureName: string) {\r\n\r\n    if (window.performance && endMarker && this.isRunningCPUProfiling) {\r\n\r\n      window.performance.mark(endMarker);\r\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\r\n      this.totalCpuDuration += cpuMeasure.duration;\r\n      this.isRunningCPUProfiling = false\r\n\r\n    }\r\n\r\n  }\r\n\r\n  updatePanel(panel: { update: any; } | null, averageArray: { logs: number[], graph: number[] }) {\r\n\r\n    if (averageArray.logs.length > 0) {\r\n\r\n      let sumLog = 0;\r\n      let max = 0.01;\r\n\r\n      for (let i = 0; i < averageArray.logs.length; i++) {\r\n\r\n        sumLog += averageArray.logs[i];\r\n\r\n        if (averageArray.logs[i] > max) {\r\n          max = averageArray.logs[i];\r\n        }\r\n\r\n      }\r\n\r\n      let sumGraph = 0;\r\n      let maxGraph = 0.01;\r\n      for (let i = 0; i < averageArray.graph.length; i++) {\r\n\r\n        sumGraph += averageArray.graph[i];\r\n\r\n        if (averageArray.graph[i] > maxGraph) {\r\n          maxGraph = averageArray.graph[i];\r\n        }\r\n\r\n      }\r\n\r\n      if (panel) {\r\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  get domElement() {\r\n    // patch for some use case in threejs\r\n    return this.dom;\r\n\r\n  }\r\n\r\n  get container() { // @deprecated\r\n\r\n    console.warn('Stats: Deprecated! this.container as been replaced to this.dom ')\r\n    return this.dom;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default Stats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}